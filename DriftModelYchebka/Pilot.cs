//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DriftModelYchebka
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;

    public partial class Pilot
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Pilot()
        {
            this.Cars = new HashSet<Car>();
            this.LeaderPairArrivals = new HashSet<PairArrivals>();
            this.HauntingPairArrivals = new HashSet<PairArrivals>();
            this.Qualifications = new HashSet<Qualification>();
        }
    
        public int Id { get; set; }
        public Nullable<int> TeamId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public Nullable<System.DateTime> Birthdate { get; set; }
        public Nullable<int> Number { get; set; }
        public string City { get; set; }
        public string ImagePilot { get; set; }

        [NotMapped]
        public Car MainCar
        {
            get => Cars.Count > 0 ? Cars.First() : null;
        }

        [NotMapped]
        public double WinCount
        {
            get
            {
                return LeaderPairArrivals.Where(lpa => lpa.FirstPilotWin == true).Count() +
                    HauntingPairArrivals.Where(hpa => hpa.FirstPilotWin == false).Count();
            }
        }

        [NotMapped]
        public double ArrivalCount
        {
            get
            {
                return LeaderPairArrivals.Count() + HauntingPairArrivals.Count();
            }
        }

        [NotMapped]
        public double WinRate
        {
            get
            {
                return ArrivalCount != 0? WinCount / ArrivalCount : 0;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Car> Cars { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PairArrivals> LeaderPairArrivals { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PairArrivals> HauntingPairArrivals { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Qualification> Qualifications { get; set; }
        public virtual Team Teams { get; set; }
    }
}
